module Servactory
  module Inputs
    class Input
      class Actor
        attr_reader name: Symbol
        attr_reader internal_name: Symbol
        attr_reader types: Array[Class]
        attr_reader default: untyped
        attr_reader options: Hash[Symbol, untyped]

        def initialize: (Input input) -> void

        private

        def define_identity_methods: (Input input) -> void
      end

      attr_reader name: Symbol
      attr_reader internal_name: Symbol
      attr_reader collection_of_options: Maintenance::Attributes::OptionsCollection
      attr_reader options: Hash[Symbol, untyped]

      def initialize: (
          Symbol name,
          Array[Symbol] helpers,
          ?as: Symbol?,
          option_helpers: untyped,
          **untyped options
        ) -> void

      def method_missing: (Symbol name, *untyped args) ?{ () -> untyped } -> untyped

      def respond_to_missing?: (Symbol name, *untyped) -> bool

      def register_options: (helpers: Array[Symbol], options: Hash[Symbol, untyped]) -> void

      def options_for_checks: () -> Hash[Symbol, untyped]

      def conflict_code: () -> untyped

      def system_name: () -> Symbol

      def i18n_name: () -> String

      def with_conflicts?: () -> bool

      def input?: () -> true

      def internal?: () -> false

      def output?: () -> false

      private

      def create_options_registrar: (options: Hash[Symbol, untyped]) -> untyped

      def available_feature_options: () -> Hash[Symbol, bool]

      def process_options_with_helpers: (helpers: Array[Symbol], options: Hash[Symbol, untyped]) -> Hash[Symbol, untyped]

      def apply_standard_helpers_to: (target_options: Hash[Symbol, untyped], helpers: Array[Symbol]) -> Hash[Symbol, untyped]

      def apply_advanced_helpers_to: (target_options: Hash[Symbol, untyped], source_options: Hash[Symbol, untyped]) -> Hash[Symbol, untyped]

      def extract_advanced_helpers: (options: Hash[Symbol, untyped]) -> Hash[Symbol, untyped]

      def transform_helpers_to_options: (helpers: Array[Symbol]) -> Hash[Symbol, untyped]

      def transform_helper_to_option: (helper: untyped, values: untyped) -> Hash[Symbol, untyped]
    end
  end
end
