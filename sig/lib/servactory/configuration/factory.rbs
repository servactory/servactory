module Servactory
  module Configuration
    class Factory
      def initialize: (Store config) -> void

      def input_exception_class: (Class value) -> (Class | untyped)
      def internal_exception_class: (Class value) -> (Class | untyped)
      def output_exception_class: (Class value) -> (Class | untyped)
      def failure_class: (Class value) -> (Class | untyped)
      def result_class: (Class value) -> (Class | untyped)

      def collection_mode_class_names: (Enumerable[Class] value) -> CollectionMode::ClassNamesCollection
      def hash_mode_class_names: (Enumerable[Class] value) -> HashMode::ClassNamesCollection

      def input_option_helpers: (Enumerable[Maintenance::Attributes::OptionHelper] value) -> OptionHelpers::OptionHelpersCollection
      def internal_option_helpers: (Enumerable[Maintenance::Attributes::OptionHelper] value) -> OptionHelpers::OptionHelpersCollection
      def output_option_helpers: (Enumerable[Maintenance::Attributes::OptionHelper] value) -> OptionHelpers::OptionHelpersCollection

      def action_aliases: (Enumerable[Symbol] value) -> Actions::Aliases::Collection
      def action_shortcuts: (Array[Symbol] array, **Hash[Symbol, String?] hash) -> Actions::Shortcuts::Collection

      # def action_rescue_handlers: (untyped value) -> untyped

      def i18n_root_key: ((Symbol | String) value) -> (String | untyped)
      def predicate_methods_enabled: (bool value) -> (bool | untyped)

      private

      attr_reader config: Store

      def subclass_of_exception?: (untyped value) -> bool
      def subclass_of_result?: (untyped value) -> bool
      def i18n_key?: (untyped value) -> bool
      def boolean?: (untyped value) -> bool

      def raise_error_about_wrong_exception_class_with: (Symbol config_name, untyped value) -> untyped
      def raise_error_about_wrong_result_class_with: (Symbol config_name, untyped value) -> untyped
      def raise_error_about_wrong_i18n_root_key_with: (Symbol config_name, untyped value) -> untyped
      def raise_error_about_wrong_predicate_methods_enabled_with: (Symbol config_name, untyped value) -> untyped
    end
  end
end
