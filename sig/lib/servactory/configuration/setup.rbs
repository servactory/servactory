module Servactory
  module Configuration
    class Setup
      attr_accessor input_exception_class: singleton(Exceptions::Input)

      attr_accessor internal_exception_class: singleton(Exceptions::Internal)

      attr_accessor output_exception_class: singleton(Exceptions::Output)

      attr_accessor success_class: singleton(Exceptions::Success)

      attr_accessor failure_class: singleton(Exceptions::Failure)

      attr_accessor result_class: singleton(Result)

      attr_accessor collection_mode_class_names: CollectionMode::ClassNamesCollection

      attr_accessor hash_mode_class_names: HashMode::ClassNamesCollection

      attr_accessor input_option_helpers: Configuration::OptionHelpers::OptionHelpersCollection

      attr_accessor internal_option_helpers: Configuration::OptionHelpers::OptionHelpersCollection

      attr_accessor output_option_helpers: Configuration::OptionHelpers::OptionHelpersCollection

      attr_accessor action_aliases: Configuration::Actions::Aliases::Collection

      attr_accessor action_shortcuts: Configuration::Actions::Shortcuts::Collection

      attr_accessor action_rescue_handlers: Configuration::Actions::RescueHandlers::Collection

      attr_accessor i18n_root_key: (Symbol | String)

      attr_accessor predicate_methods_enabled: bool

      def initialize: (untyped context) -> void

      def predicate_methods_enabled?: -> bool

      def self.build_for: (untyped service_class) -> Store

      def method_missing: (Symbol name, *untyped _args) -> untyped
      def respond_to_missing?: (Symbol name, bool include_private) -> bool

      private

      def configuration_store: () -> Store

      def default_collection_mode_class_names: -> Set[Class]

      def default_hash_mode_class_names: -> Set[Class]

      def default_input_option_helpers: -> Set[Maintenance::Attributes::OptionHelper]

      def default_internal_option_helpers: -> Set[Maintenance::Attributes::OptionHelper]

      def default_output_option_helpers: -> Set[Maintenance::Attributes::OptionHelper]

      def self.apply_service_configuration_for: (Store store, untyped service_class) -> void
      def self.servactory_ancestors_for: (untyped service_class) -> Array[untyped]
    end
  end
end
