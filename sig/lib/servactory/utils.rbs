module Servactory
  module Utils
    FALSE_VALUES: Set[false | Symbol | String | Integer]

    def self?.adapt: (instance context, (::Hash[untyped, untyped] | Datory::Base | Context::StoreInputs) data) -> Context::StoreInputs

    def self?.fetch_hash_with_desired_attribute: ((Inputs::Input | Internals::Internal | Outputs::Output) attribute) -> Hash[Symbol, untyped]

    def self?.define_attribute_with: (input: Inputs::Input?, internal: Internals::Internal?, output: Outputs::Output?) -> (Inputs::Input | Internals::Internal | Outputs::Output | Exception)

    def self?.really_input?: ((Inputs::Input | Internals::Internal | Outputs::Output)? attribute) -> bool

    def self?.really_internal?: ((Inputs::Input | Internals::Internal | Outputs::Output)? attribute) -> bool

    def self?.really_output?: ((Inputs::Input | Internals::Internal | Outputs::Output)? attribute) -> bool

    def self?.extract_special_character_from: (String string) -> Array[String | nil]

    # @param value [#to_s]
    # @return [Boolean]
    def self?.true?: (untyped value) -> untyped

    # @param value [#to_s]
    # @return [Boolean]
    def self?.value_present?: (untyped value) -> untyped

    # NOTE: Based on `query_cast_attribute` from ActiveRecord:
    #       https://github.com/rails/rails/blob/main/activerecord/lib/active_record/attribute_methods/query.rb
    # @param value [#to_s]
    # @return [Boolean]
    def self?.query_attribute: (untyped value) -> untyped

    def self?.constantize_class: (untyped class_or_name) -> Class?

    private

    def self?.instance_variables_to_hash_from: (Datory::Base data) -> Hash[Symbol, untyped]
  end
end
