module Servactory
  module Utils
    def adapt: (untyped data) -> Hash[Symbol, untyped]

    def fetch_hash_with_desired_attribute: (
      (Servactory::Inputs::Input | Servactory::Internals::Internal | Servactory::Outputs::Output) attribute
    ) -> Hash[Symbol, untyped]

    def define_attribute_with: (
      ?input: Servactory::Inputs::Input?,
      ?internal: Servactory::Internals::Internal?,
      ?output: Servactory::Outputs::Output?
    ) -> (Servactory::Inputs::Input | Servactory::Internals::Internal | Servactory::Outputs::Output)?

    def extract_special_character_from: (String string) -> [String, String?]

    FALSE_VALUES: Set[false | nil | String | Symbol | Integer]

    # @param value [#to_s]
    def true?: (untyped value) -> bool

    # @param value [#to_s]
    def value_present?: (untyped value) -> bool

    # @param value [#to_s]
    def query_attribute: (untyped value) -> bool

    def constantize_class: ((Class | String | Symbol) class_or_name) -> Class?

    private

    def really_input?: ((Servactory::Inputs::Input | Servactory::Internals::Internal | Servactory::Outputs::Output)? attribute) -> bool

    def really_internal?: ((Servactory::Inputs::Input | Servactory::Internals::Internal | Servactory::Outputs::Output)? attribute) -> bool

    def really_output?: ((Servactory::Inputs::Input | Servactory::Internals::Internal | Servactory::Outputs::Output)? attribute) -> bool

    def instance_variables_to_hash_from: (untyped data) -> Hash[Symbol, untyped]
  end
end
