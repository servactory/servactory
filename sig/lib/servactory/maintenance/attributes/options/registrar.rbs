module Servactory
  module Maintenance
    module Attributes
      module Options
        class Registrar
          RESERVED_OPTIONS: Array[Symbol]
          DEFAULT_FEATURES: Hash[Symbol, bool]

          @attribute: (Servactory::Inputs::Input | Servactory::Internals::Internal | Servactory::Outputs::Output)
          @options: Hash[Symbol, untyped]
          @features: Hash[Symbol, bool]
          @collection: OptionsCollection

          def self.register: (
            attribute: (Servactory::Inputs::Input | Servactory::Internals::Internal | Servactory::Outputs::Output),
            options: Hash[Symbol, untyped],
            features: Hash[Symbol, bool]
          ) -> Registrar

          def initialize: (
            attribute: (Servactory::Inputs::Input | Servactory::Internals::Internal | Servactory::Outputs::Output),
            options: Hash[Symbol, untyped],
            features: Hash[Symbol, bool]
          ) -> void

          def register: () -> self
          def collection: () -> OptionsCollection

          private

          def register_feature: (Symbol feature_name, untyped validation_class) -> void
          def register_required_option: (Servactory::Inputs::Validations::Required validation_class) -> void
          def register_types_option: (Validations::Type validation_class) -> void
          def register_default_option: (Validations::Type validation_class) -> void
          def register_must_option: (Validations::Must validation_class) -> void
          def register_prepare_option: (nil validation_class) -> void
          def required_define_methods: () -> Array[DefineMethod]
          def required_define_conflicts: () -> Array[DefineConflict]

          def create_option: (
            name: Symbol,
            validation_class: untyped,
            **untyped
          ) -> void

          def create_define_method: (
            name: Symbol,
            content: ^(option: untyped) -> untyped
          ) -> DefineMethod
        end
      end
    end
  end
end
