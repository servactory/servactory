module Servactory
  module Maintenance
    module Attributes
      class Option
        DEFAULT_BODY: Proc

        attr_reader name: Symbol
        attr_reader validation_class: Class?
        attr_reader define_methods: Array[DefineMethod]?
        attr_reader define_conflicts: Array[DefineConflict]?
        attr_reader need_for_checks: bool
        attr_reader body: Hash[Symbol, untyped]

        def initialize: (
          name: Symbol,
          attribute: (Servactory::Inputs::Input | Servactory::Internals::Internal | Servactory::Outputs::Output),
          validation_class: Class?,
          need_for_checks: bool,
          body_fallback: (bool | Class | Hash[untyped, untyped])?,
          ?original_value: Array[Class]?,
          ?body_key: Symbol?,
          ?body_value: (bool | Class)?,
          ?define_methods: Array[DefineMethod]?,
          ?define_conflicts: Array[DefineConflict]?,
          ?with_advanced_mode: bool,
          **untyped options
        ) -> void

        def need_for_checks?: () -> bool

        private

        def construct_body: (
          original_value: Array[Class]?,
          options: Hash[Symbol, untyped],
          body_key: Symbol?,
          body_value: (bool | Class)?,
          body_fallback: (bool | Class | Hash[untyped, untyped])?,
          with_advanced_mode: bool
        ) -> untyped

        def use_advanced_mode: (
          options: Hash[Symbol, untyped],
          body_key: Symbol?,
          body_value: (bool | Class)?,
          body_fallback: (bool | Class | Hash[untyped, untyped])?
        ) -> Hash[Symbol, untyped]

        def create_default_body: (
          body_key: Symbol?,
          body_fallback: (bool | Class | Hash[untyped, untyped])?
        ) -> Hash[Symbol, untyped]

        def extract_body_from_options: (
          options: Hash[Symbol, untyped],
          default_body: Hash[Symbol, untyped]
        ) -> untyped

        def construct_advanced_body: (
          body: untyped,
          body_key: Symbol?,
          body_value: (bool | Class)?,
          body_fallback: (bool | Class | Hash[untyped, untyped])?
        ) -> Hash[Symbol, untyped]

        def build_hash_body: (
          body: Hash[Symbol, untyped],
          body_key: Symbol?,
          body_value: (bool | Class)?,
          body_fallback: (bool | Class | Hash[untyped, untyped])?
        ) -> Hash[Symbol, untyped]

        def extract_body_content: (
          body: Hash[Symbol, untyped],
          body_key: Symbol?,
          body_value: (bool | Class)?,
          body_fallback: (bool | Class | Hash[untyped, untyped])?,
          message: untyped?
        ) -> untyped

        def build_simple_body: (
          body_key: Symbol?,
          body: untyped
        ) -> Hash[Symbol, untyped]

        def apply_dynamic_methods_to: (
          attribute: (Servactory::Inputs::Input | Servactory::Internals::Internal | Servactory::Outputs::Output)
        ) -> void

        def generate_methods_code: () -> String?
      end
    end
  end
end
