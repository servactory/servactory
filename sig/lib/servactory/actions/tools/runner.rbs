module Servactory
  module Actions
    module Tools
      class Runner
        @context: instance
        @collection_of_stages: Stages::Collection

        def self.run!: (*untyped) ?{ () -> untyped } -> void

        def initialize: (instance context, Stages::Collection collection_of_stages) -> void

        def run!: () -> void

        private

        def use_call: () -> void

        def call_stage: (Stages::Stage stage) -> void

        def call_wrapper_with_actions: (Proc wrapper, Symbol? rollback, Collection actions) -> void

        def call_actions: (Collection actions) -> void

        def call_action: (Action action) -> void

        def unnecessary_for_stage?: (Stages::Stage stage) -> bool

        def unnecessary_for_make?: (Action action) -> bool

        def prepare_condition_for: ((Proc | bool)? condition) -> bool

        def rescue_with_handler: (Exception exception) -> void
      end
    end
  end
end
