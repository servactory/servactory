module Servactory
  module Context
    module Workspace
      class Outputs
        @context: untyped
        @collection_of_outputs: Outputs::Collection

        def initialize: (context: instance, collection_of_outputs: Outputs::Collection) -> void

        def only: (*Symbol names) -> Hash[Symbol, untyped]

        def except: (*Symbol names) -> Hash[Symbol, untyped]

        def method_missing: (Symbol name, *untyped args) -> untyped

        def respond_to_missing?: (Symbol name, *untyped) -> bool

        private

        attr_reader :context
        attr_reader :collection_of_outputs

        def assign_with: (prepared_name: Symbol, value: untyped) { () -> untyped } -> untyped
        def fetch_with: (name: Symbol) { () -> untyped } -> untyped

        def raise_error_for: (Symbol type, Symbol name) -> Exception
      end
    end
  end
end
