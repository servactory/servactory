module Servactory
  module Context
    module Warehouse
      class Setup
        @context: instance

        @inputs: Hash[Symbol, untyped]

        @internals: Hash[Symbol, untyped]

        @outputs: Hash[Symbol, untyped]

        @context_data: Hash[Symbol, untyped]

        @context_id: String

        def initialize: (instance context) -> void

        def assign_inputs: (Hash[Symbol, untyped] arguments) -> untyped

        def fetch_input: (Symbol name) -> untyped

        def assign_internal: (Symbol name, untyped value) -> untyped

        def fetch_internal: (Symbol name) -> untyped

        def assign_output: (Symbol name, untyped value) -> untyped

        def fetch_output: (Symbol name) -> untyped

        def inputs: () -> Inputs

        def internals: () -> Internals

        def outputs: () -> Outputs

        private

        def assign_attribute: (Symbol section, Symbol name, untyped value) -> untyped

        def context_data: () -> { inputs: Inputs, internals: Internals, outputs: Outputs }

        def state: () -> Hash[String, { inputs: Inputs, internals: Internals, outputs: Outputs }]

        def context_id: () -> String
      end
    end
  end
end
