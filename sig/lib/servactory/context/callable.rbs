module Servactory
  module Context
    module Callable
      module Arguments
        self.@collection: Hash[Symbol | String, untyped]

        def self.collection: () -> Hash[Symbol | String, untyped]

        def self.add: (Symbol | String name, untyped value) -> Hash[Symbol | String, untyped]

        def self.merge: (Hash[Symbol | String, untyped] incoming_arguments) -> Hash[Symbol | String, untyped]

        def self.clear: () -> Hash[Symbol | String, untyped]
      end

      def call!: (?Hash[Symbol | String, untyped] arguments) -> singleton(Result)

      def call: (?Hash[Symbol | String, untyped] arguments) -> singleton(Result)

      def method_missing: (Symbol name, *untyped args) -> self

      def respond_to_missing?: (Symbol name, *untyped) -> bool

      private

      def _call!: (instance context) -> void
    end
  end
end
